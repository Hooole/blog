import{o as e,c as a,d as s}from"./app.437d6b62.js";const n='{"title":"IF","description":"","frontmatter":{},"headers":[{"level":3,"title":"IF","slug":"if"}],"relativePath":"typeChallenges/if.md","lastUpdated":1695806102302}',o={},t=s('<h3 id="if"><a class="header-anchor" href="#if" aria-hidden="true">#</a> IF</h3><p>实现一个<code>IF</code>类型，它接收一个条件类型<code>C</code>，<code>C</code>判断为真是返回类型<code>T</code>,判断为假时返回类型<code>F</code>。<code>C</code>只能是<code>true</code>或者<code>false</code>，<code>T</code>和 <code>F</code>是任意类型</p><p>例如</p><ul><li><code>type A = If&lt;true, &#39;a&#39;, &#39;b&#39;&gt;</code> // expected to be &#39;a&#39;</li><li><code>type B = If&lt;false, &#39;a&#39;, &#39;b&#39;&gt;</code> // expected to be &#39;b&#39;</li></ul><div class="language-javascript"><pre><code>type <span class="token constant">IF</span><span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">boolean</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">true</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">F</span>\n</code></pre></div><ul><li><code>C extends boolean</code> : C是<code>boolean</code>类型的子类型</li><li><code>C extends true</code> : 可以理解为 <code>C === true</code></li></ul>',6);o.render=function(s,n,o,c,p,d){return e(),a("div",null,[t])};export default o;export{n as __pageData};
