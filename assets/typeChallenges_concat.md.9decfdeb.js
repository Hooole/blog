import{o as a,c as n,d as s}from"./app.437d6b62.js";const t='{"title":"Concat","description":"","frontmatter":{},"headers":[{"level":3,"title":"Concat","slug":"concat"}],"relativePath":"typeChallenges/concat.md","lastUpdated":1695805337417}',e={},o=s('<h3 id="concat"><a class="header-anchor" href="#concat" aria-hidden="true">#</a> Concat</h3><p>实现<code>Concat</code>类型， 这个类型接收两个参数， 返回新数组类型应该按照输入参数从左到右的顺序合并为一个新的数组</p><p>例如</p><ul><li><code>type Result = Concat&lt;[1], [2]&gt;</code> // expected to be [1, 2]</li></ul><div class="language-javascript"><pre><code>type <span class="token constant">IF</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">]</span>\n</code></pre></div><ul><li><code>T extends any[]</code> : 用来限制<code>T</code>是一个数组。如果传递非数组会报错</li><li><code>[...T, ...U]</code> : 类似JavaScript的扩展运算符<code>...</code></li></ul>',6);e.render=function(s,t,e,p,c,l){return a(),n("div",null,[o])};export default e;export{t as __pageData};
