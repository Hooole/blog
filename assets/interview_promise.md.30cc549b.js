import{o as n,c as s,d as a}from"./app.437d6b62.js";const p='{"title":"实现Promise","description":"","frontmatter":{},"headers":[{"level":2,"title":"实现Promise","slug":"实现promise"},{"level":3,"title":"promise的基本特点","slug":"promise的基本特点"},{"level":3,"title":"Promise简单实现","slug":"promise简单实现"}],"relativePath":"interview/promise.md","lastUpdated":1648450937134}',t={},o=a('<h2 id="实现promise"><a class="header-anchor" href="#实现promise" aria-hidden="true">#</a> 实现Promise</h2><h3 id="promise的基本特点"><a class="header-anchor" href="#promise的基本特点" aria-hidden="true">#</a> promise的基本特点</h3><ul><li>可进行链式调用，且每次then返回了新的Promise</li><li>只输出第一次resolve的内容，reject的内容没有输出，即Promise是有状态且状态只可以由pending -&gt; fulfilled -&gt; reject,是不可逆的</li><li>then中返回了新的Promise,但是then中注册的回调仍然是属于上一个Promise的</li></ul><h3 id="promise简单实现"><a class="header-anchor" href="#promise简单实现" aria-hidden="true">#</a> Promise简单实现</h3><div class="language-javascript"><pre><code>  <span class="token keyword">function</span> <span class="token function">newPromise</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token string">&#39;pending&#39;</span>\n    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span>onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">newPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          onFulfilled<span class="token punctuation">,</span>\n          onRejected<span class="token punctuation">,</span>\n          resolve<span class="token punctuation">,</span>\n          reject\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">catch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>onError<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n        <span class="token keyword">return</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> cb <span class="token operator">=</span> state <span class="token operator">===</span> <span class="token string">&#39;fulfilled&#39;</span> <span class="token operator">?</span> callback<span class="token punctuation">.</span>onFulfilled <span class="token operator">:</span> callback<span class="token punctuation">.</span>onRejected\n      <span class="token keyword">const</span> next <span class="token operator">=</span> state <span class="token operator">===</span> <span class="token string">&#39;fulfilled&#39;</span> <span class="token operator">?</span> callback<span class="token punctuation">.</span>resolve <span class="token operator">:</span> callback<span class="token punctuation">.</span>reject\n\n      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">try</span><span class="token punctuation">{</span>\n        <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n        <span class="token function">next</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        callback<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n       <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">!==</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n      <span class="token comment">// 链式调用 当then方法中继续返回promise对象时处理</span>\n       <span class="token keyword">if</span><span class="token punctuation">(</span>newValue <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newValue <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> newValue <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">const</span> <span class="token punctuation">{</span> then <span class="token punctuation">}</span> <span class="token operator">=</span> newValue\n         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>\n         <span class="token punctuation">}</span>\n       <span class="token punctuation">}</span>\n       state <span class="token operator">=</span> <span class="token string">&#39;fulfilled&#39;</span>\n       value <span class="token operator">=</span> newValue\n       <span class="token function">handleCb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n     <span class="token punctuation">}</span>\n     <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n       <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">!==</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n       <span class="token keyword">if</span><span class="token punctuation">(</span>error <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> error <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> error <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> <span class="token punctuation">{</span> then <span class="token punctuation">}</span> <span class="token operator">=</span> error\n          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n       <span class="token punctuation">}</span>\n       state <span class="token operator">=</span> <span class="token string">&#39;rejected&#39;</span>\n       value <span class="token operator">=</span> error\n       <span class="token function">handleCb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n     <span class="token punctuation">}</span>\n     <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">handleCb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">while</span><span class="token punctuation">(</span>callbacks<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> callback <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">handle</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">fn</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre></div>',5);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
