import{o as s,c as n,d as a}from"./app.437d6b62.js";const p='{"title":"元组转联合类型","description":"","frontmatter":{},"headers":[{"level":3,"title":"元组转联合类型","slug":"元组转联合类型"}],"relativePath":"typeChallenges/tupleToUnion.md","lastUpdated":1698053754943}',e={},t=a('<h3 id="元组转联合类型"><a class="header-anchor" href="#元组转联合类型" aria-hidden="true">#</a> 元组转联合类型</h3><div class="language-javascript"><pre><code>type Arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span>\n\ntype Test <span class="token operator">=</span> TupleToUnion<span class="token operator">&lt;</span>Arr<span class="token operator">&gt;</span> <span class="token comment">// expected to be &#39;1&#39; | &#39;2&#39; | &#39;3&#39;</span>\n</code></pre></div><div class="language-javascript"><pre><code><span class="token comment">// 第一种实现方式</span>\ntype TupleToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span>number<span class="token punctuation">]</span>\n\n<span class="token comment">// 第二种实现方式</span>\ntype TupleToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>infer <span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> never\n</code></pre></div><ul><li><code>T[number]</code> : 它会自动迭代元组的数字型索引，然后将所有元素组合成一个联合类型</li></ul><p>第二种实现方式需要了解的是tuple类型在一定条件下，是可以赋值给数组类型，比如:</p><div class="language-javascript"><pre><code>type TTuple <span class="token operator">=</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span>\ntype TArray <span class="token operator">=</span> Array<span class="token operator">&lt;</span>string <span class="token operator">|</span> number<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\ntype Res <span class="token operator">=</span> TTuple <span class="token keyword">extends</span> <span class="token class-name">TArray</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\ntype ResO <span class="token operator">=</span> TArray <span class="token keyword">extends</span> <span class="token class-name">TTuple</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><p>因此使用<code>T extends Array&lt;infer R&gt;</code>判断是否满足条件，满足条件的情况下 <code>R</code>就为对应的联合类型</p>',7);e.render=function(a,p,e,o,c,l){return s(),n("div",null,[t])};export default e;export{p as __pageData};
