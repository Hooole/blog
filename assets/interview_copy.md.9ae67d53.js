import{o as n,c as s,d as a}from"./app.437d6b62.js";const t='{"title":"深拷贝 and 浅拷贝","description":"","frontmatter":{},"headers":[{"level":2,"title":"深拷贝 and 浅拷贝","slug":"深拷贝-and-浅拷贝"},{"level":3,"title":"介绍","slug":"介绍"},{"level":3,"title":"常规实现","slug":"常规实现"},{"level":3,"title":"拷贝Symbol","slug":"拷贝symbol"},{"level":3,"title":"解决递归爆栈问题","slug":"解决递归爆栈问题"}],"relativePath":"interview/copy.md","lastUpdated":1648450937134}',p={},o=a('<h2 id="深拷贝-and-浅拷贝"><a class="header-anchor" href="#深拷贝-and-浅拷贝" aria-hidden="true">#</a> 深拷贝 and 浅拷贝</h2><h3 id="介绍"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><ul><li><p>基本数据类型的特点： 直接存储在栈中的数据</p></li><li><p>引用数据类型的特点： 存储的是该对象在栈中的引用，真实的数据存放在堆内存中</p><p><strong>引用类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会先检索其在栈中的地址，取得地址后获取堆中的实体</strong></p><p>深拷贝和浅拷贝都是针对的引用类型，在JS中，对基本类型的赋值会对值进行一份拷贝，对引用类型的赋值，则会进行地址的拷贝，最终两个变量指向同一份数据</p><div class="language-javascript"><pre><code>  <span class="token comment">// 基本类型</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> b <span class="token operator">=</span> a\n  a <span class="token operator">=</span> <span class="token number">3</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment">// a：3,b：1会指向不同的数据</span>\n  <span class="token comment">// 引用类型</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>c<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>\n  <span class="token keyword">let</span> b <span class="token operator">=</span> a\n  a<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">2</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment">// a: {c:2},b:{c:2} 指向同一份数据</span>\n</code></pre></div><p>所以对于引用类型，直接赋值会指向同一份数据，修改其中一个会对改变另一个的值<br> 为了切断这种关系，就需要拷贝一份，根据拷贝的层级不同，只拷贝一层的叫浅拷贝，无限层级拷贝的叫深拷贝</p></li></ul><h3 id="常规实现"><a class="header-anchor" href="#常规实现" aria-hidden="true">#</a> 常规实现</h3><div class="language-javascript"><pre><code> <span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> <span class="token keyword">null</span>\n <span class="token punctuation">}</span>\n <span class="token keyword">function</span> <span class="token function">deepCopy1</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root\n   <span class="token keyword">const</span> target <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n       target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n     <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n   <span class="token keyword">return</span> target\n <span class="token punctuation">}</span>\n  <span class="token comment">// let a = {c:1,b:{d:3,e:[1,2,3]}}</span>\n  <span class="token comment">// 深拷贝无法循环引用问题，（a.f = a）</span>\n  <span class="token comment">// 引入hash</span>\n  <span class="token keyword">function</span> <span class="token function">deepCopy2</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>hash<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root\n   <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n   <span class="token keyword">const</span> target <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n   hash<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>target<span class="token punctuation">)</span>\n   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>hash<span class="token punctuation">)</span>\n     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n       target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n     <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n   <span class="token keyword">return</span> target\n <span class="token punctuation">}</span>\n</code></pre></div><h3 id="拷贝symbol"><a class="header-anchor" href="#拷贝symbol" aria-hidden="true">#</a> 拷贝Symbol</h3><div class="language-javascript"><pre><code>  <span class="token keyword">function</span> <span class="token function">deepCopy3</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>hash<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root\n    <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> target <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    hash<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>target<span class="token punctuation">)</span>\n    Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>hash<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> target  \n  <span class="token punctuation">}</span>\n</code></pre></div><h3 id="解决递归爆栈问题"><a class="header-anchor" href="#解决递归爆栈问题" aria-hidden="true">#</a> 解决递归爆栈问题</h3><div class="language-javascript"><pre><code>  <span class="token keyword">function</span> <span class="token function">deepCopy4</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> target <span class="token operator">=</span>  Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">const</span> stackList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      parent<span class="token operator">:</span> target<span class="token punctuation">,</span>\n      key<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n      data<span class="token operator">:</span> root\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>stackList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> node <span class="token operator">=</span> stackList<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span>parent<span class="token punctuation">,</span>key<span class="token punctuation">,</span>data<span class="token punctuation">}</span> <span class="token operator">=</span> node\n      <span class="token keyword">let</span> res <span class="token operator">=</span> parent\n      <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res <span class="token operator">=</span> parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          stackList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            parent<span class="token operator">:</span> res<span class="token punctuation">,</span>\n            key<span class="token operator">:</span> i<span class="token punctuation">,</span>\n            data<span class="token operator">:</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> target\n  <span class="token punctuation">}</span>\n</code></pre></div>',9);p.render=function(a,t,p,c,e,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
