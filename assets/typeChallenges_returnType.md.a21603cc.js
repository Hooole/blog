import{o as n,c as a,d as s}from"./app.437d6b62.js";const e='{"title":"内置ReturnType类型","description":"","frontmatter":{},"headers":[{"level":3,"title":"内置ReturnType类型","slug":"内置returntype类型"}],"relativePath":"typeChallenges/returnType.md","lastUpdated":1697016276679}',p={},t=s('<h3 id="内置returntype类型"><a class="header-anchor" href="#内置returntype类型" aria-hidden="true">#</a> 内置ReturnType类型</h3><p>实现内置的 ReturnType 类型</p><p>例如</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token number">1</span>\n  <span class="token keyword">else</span>\n    <span class="token keyword">return</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\n\ntype a <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> fn<span class="token operator">&gt;</span> <span class="token comment">// should be &quot;1 | 2&quot;</span>\n</code></pre></div><div class="language-javascript"><pre><code>type MyReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> infer <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> never\n</code></pre></div><ul><li><code>T extends (...args: any[]) =&gt; infer R</code> : 判断<code>T</code>类型是否是一个函数的子类型，既<code>T</code>是不是一个函数， <code>infer R</code> 表示待推导的函数类型为R， 后续可以在表达式中使用<code>R</code>来代替真正的返回类型</li></ul>',6);p.render=function(s,e,p,o,r,c){return n(),a("div",null,[t])};export default p;export{e as __pageData};
