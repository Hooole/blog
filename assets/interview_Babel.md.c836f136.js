import{o as n,c as s,d as a}from"./app.437d6b62.js";const p='{"title":"Babel编译对代码做了什么？","description":"","frontmatter":{},"headers":[{"level":3,"title":"const、let编译分析","slug":"const、let编译分析"},{"level":3,"title":"经典的for循环问题编译分析","slug":"经典的for循环问题编译分析"},{"level":3,"title":"箭头函数的编译分析","slug":"箭头函数的编译分析"},{"level":3,"title":"主要部分","slug":"主要部分"},{"level":3,"title":"词法分析","slug":"词法分析"},{"level":3,"title":"语法分析","slug":"语法分析"},{"level":3,"title":"代码转换","slug":"代码转换"},{"level":3,"title":"生成代码","slug":"生成代码"},{"level":3,"title":"最后","slug":"最后"}],"relativePath":"interview/Babel.md","lastUpdated":1648604758176}',t={},o=a('<h1 id="babel编译对代码做了什么？"><a class="header-anchor" href="#babel编译对代码做了什么？" aria-hidden="true">#</a> Babel编译对代码做了什么？</h1><p><strong>Babel 是一个 JavaScript 编译器</strong></p><p>Babel 是一个工具链，主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。下面列出的是 Babel 能为你做的事</p><ul><li>语法转换</li><li>通过 Polyfill 方式在目标环境中添加缺失的特性</li><li>源码转换</li></ul><h3 id="const、let编译分析"><a class="header-anchor" href="#const、let编译分析" aria-hidden="true">#</a> const、let编译分析</h3><p>简单的说，const、let一律会被编译为var。<br> 为了保证const的不可变性，Babel如果在编译过程中发现对const声明的变量进行了二次赋值，则会直接报错，这样就可以直接在编译阶段对错误进行处理。<br></p><div class="language-javascript"><pre><code>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>\n  a <span class="token operator">=</span> <span class="token number">2</span>\n  <span class="token comment">// 编译后</span>\n  <span class="token keyword">function</span> <span class="token function">_readOnlyError</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;\\&quot; is read-only&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">_readOnlyError</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 可以发现，只要Babel检测到const声明的变量被改变赋值，就会主动插入一个_readOnlyError函数，并执行此函数，这个函数的内容就是报错，因此代码执行时就会直接抛出异常</span>\n</code></pre></div><p>至于let的块级概念，我们在ES5中一般通过IIFE(立即调用函数表达式)实现块级作用域，但是Babel对此处理的非常巧妙，他会在块内给变量换一个名字，这样在块外就无法被访问到了<br></p><div class="language-javascript"><pre><code>  <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n  <span class="token comment">// 编译后</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> _a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>我们还知道使用let或const声明的变量会存在暂时性死区现象:代码声明变量所在的区块会形成一个封闭区域，在这个区域中，只要是声明变量前使用这些变量，就会报错<br></p><div class="language-javascript"><pre><code>  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\n  <span class="token punctuation">{</span>\n    foo <span class="token operator">=</span> <span class="token string">&#39;bcd&#39;</span>\n    <span class="token keyword">let</span> foo\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 这段代码会报错， Uncaught ReferenceError: Cannot access &#39;foo&#39; before initialization</span>\n  <span class="token comment">// 编译后</span>\n  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">{</span>\n    _foo <span class="token operator">=</span> <span class="token string">&#39;bcd&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> _foo<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 在严格模式下不允许使用未声明的变量，这样在声明前使用这个变量就会报错</span>\n</code></pre></div><h3 id="经典的for循环问题编译分析"><a class="header-anchor" href="#经典的for循环问题编译分析" aria-hidden="true">#</a> 经典的for循环问题编译分析</h3><div class="language-javascript"><pre><code>  <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  array<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  \n  <span class="token comment">// 6</span>\n  <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  array<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n  <span class="token comment">// 10</span>\n\n  <span class="token comment">// 那babel是如何解决这个问题的呢？</span>\n  <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">_loop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">_loop</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">_loop</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  array<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 可以看到babel使用了闭包保存了每一个循环变量i的值</span>\n</code></pre></div><h3 id="箭头函数的编译分析"><a class="header-anchor" href="#箭头函数的编译分析" aria-hidden="true">#</a> 箭头函数的编译分析</h3><p>其实箭头函数的转换也不难理解</p><div class="language-javascript"><pre><code>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    prop<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>\n      <span class="token keyword">let</span> <span class="token function-variable function">innerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">2</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">let</span> <span class="token function-variable function">innerFunc1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">3</span>\n      <span class="token punctuation">}</span>  \n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 编译后</span>\n  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    prop<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> _this2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> <span class="token function-variable function">innerFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">innerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        _this2<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> <span class="token function-variable function">innerFunc1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">innerFunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>可以看到通过var _this2 = this,将当前环境下的this保存为_this2, 可以在调用innerFunc时用新存储的_this2替换函数体内的this</p><p><strong>看了几个例子之后，我们一定好奇babel背后的原理到底是什么？</strong></p><h3 id="主要部分"><a class="header-anchor" href="#主要部分" aria-hidden="true">#</a> 主要部分</h3><ul><li>解析: 将代码转换成AST(抽象语法树)</li><li>转换: 访问AST的节点进行变换操作生成新的AST</li><li>生成： 以新的AST为基础生成代码</li></ul><p>接下来就实现一个简单版的babel，主要是为了了解babel的原理,具体的实现可以查看<a href="https://github.com/babel/babel" target="_blank" rel="noopener noreferrer">Babel</a></p><h4 id="_1、代码解析"><a class="header-anchor" href="#_1、代码解析" aria-hidden="true">#</a> 1、代码解析</h4><p>代码解析，就是我们常说的parser，用于将一段代码解析成一个数据结构<br> 例如这段es6的代码:</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>\n</code></pre></div><p><a href="https://astexplorer.net/" target="_blank" rel="noopener noreferrer">astexplorer</a>可以通过这个网站查看转成AST后的数据结构<br></p><p><a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noopener noreferrer">the-super-tiny-compiler</a>简化的编译器原理实现<br></p><p>我们以解析上面的函数为目标，写一个简单的parser<br><strong>解析有两个关键的步骤</strong></p><ol><li>词法解析: 将字符串形式的代码转换为Tokens(令牌)，Tokens 可以视作是一些语法片段组成的数</li><li>语法分析： 这个阶段语法解析器（Parser）会把Tokens转换为抽象语法树</li></ol><h3 id="词法分析"><a class="header-anchor" href="#词法分析" aria-hidden="true">#</a> 词法分析</h3><p>所以， Tokens一般长这样:</p><div class="language-javascript"><pre><code>  <span class="token comment">// const a = 1</span>\n  <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;identifier&#39;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&#39;const&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;identifier&#39;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;operator&#39;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">&#39;Literal&#39;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n</code></pre></div><p>有了期望的结果后，我们就可以实现这个函数了</p><div class="language-javascript"><pre><code>  <span class="token keyword">function</span> <span class="token function">tokenizer</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 定义一个指针</span>\n      <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token comment">// 定义一个数组用于储存token</span>\n      <span class="token keyword">let</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取指针指向的字符.</span>\n        <span class="token keyword">let</span> char <span class="token operator">=</span> input<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// 处理标识符，一般是以字母开头的连续字符</span>\n        <span class="token keyword">let</span> <span class="token constant">LETTERS</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">LETTERS</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">LETTERS</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            value <span class="token operator">+=</span> char<span class="token punctuation">;</span>\n            char <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token operator">++</span>current<span class="token punctuation">]</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;identifier&#39;</span><span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">continue</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 处理空格</span>\n        <span class="token keyword">let</span> <span class="token constant">WHITESPACE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">WHITESPACE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          current<span class="token operator">++</span><span class="token punctuation">;</span>\n          <span class="token keyword">continue</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 处理数字</span>\n        <span class="token keyword">let</span> <span class="token constant">NUMBERS</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NUMBERS</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">NUMBERS</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            value <span class="token operator">+=</span> char<span class="token punctuation">;</span>\n            char <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token operator">++</span>current<span class="token punctuation">]</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;Literal&#39;</span><span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">continue</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 处理 =</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            type<span class="token operator">:</span> <span class="token string">&#39;operator&#39;</span><span class="token punctuation">,</span>\n            value<span class="token operator">:</span> char<span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          current <span class="token operator">++</span><span class="token punctuation">;</span>\n          <span class="token keyword">continue</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;无法识别当前字符 &#39;</span> <span class="token operator">+</span> char<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> tokens<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre></div><p>通过此函数我们就得到了非常简单的词法分析器</p><h3 id="语法分析"><a class="header-anchor" href="#语法分析" aria-hidden="true">#</a> 语法分析</h3><p>实现了词法分析后，我们就需要实现语法分析了，语法分析是要比词法分析复杂的多的,之所以复杂，是因为要分析各种语法（语句、表达式、声明等）的可能性，要根据Tokens提供的信息分析出代码之间的逻辑关系，只有经过词法分析token流才能成为有结构的语法树<br> 语法分析一般是遵循<a href="https://github.com/estree/estree" target="_blank" rel="noopener noreferrer">estree规范</a><br> 有了这些规则后我们就可以实现语法分析函数</p><div class="language-javascript"><pre><code>  <span class="token keyword">function</span> <span class="token function">parser</span><span class="token punctuation">(</span><span class="token parameter">tokens</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 声明一个指针</span>\n    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token comment">// 如果字符为const，则是一个声明</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;identifier&#39;</span> <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;const&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> declarations <span class="token operator">=</span> <span class="token punctuation">{</span>\n          type<span class="token operator">:</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token punctuation">,</span>\n          kind<span class="token operator">:</span> token<span class="token punctuation">.</span>value\n        <span class="token punctuation">}</span>\n        current <span class="token operator">++</span>\n        token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>current<span class="token punctuation">]</span>\n        <span class="token comment">// const 后面需要跟变量，如果不是则报错</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;identifier&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;const 后面需要跟变量&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 获取变量名称</span>\n        declarations<span class="token punctuation">.</span>identifierName <span class="token operator">=</span> token<span class="token punctuation">.</span>value\n        current <span class="token operator">++</span>\n        token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>current<span class="token punctuation">]</span>\n        <span class="token comment">// 跟在’=‘后面的应该是常量或者表达式，额外判断的代码就忽略了，直接解析常量</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;operator&#39;</span> <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          declarations<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token function">parseLiteral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> declarations<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">parseLiteral</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> init\n      current <span class="token operator">++</span>\n      <span class="token keyword">const</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>current<span class="token punctuation">]</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;Literal&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        init <span class="token operator">=</span> <span class="token punctuation">{</span>\n          type<span class="token operator">:</span> <span class="token string">&#39;Literal&#39;</span><span class="token punctuation">,</span>\n          value<span class="token operator">:</span> token<span class="token punctuation">.</span>value\n        <span class="token punctuation">}</span>\n        current<span class="token operator">++</span>\n      <span class="token punctuation">}</span> \n      <span class="token keyword">return</span> init\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> ast <span class="token operator">=</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">,</span>\n      body<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// 当指针指向在tokens范围内是执行</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      ast<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> ast<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><p>这样我们就使用暴力函数parser了token流，最终得到了简陋的抽象语法树</p><div class="language-json"><pre><code> <span class="token punctuation">{</span>\n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Program&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;kind&quot;</span><span class="token operator">:</span> <span class="token string">&quot;const&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;identifierName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;init&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Literal&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><h3 id="代码转换"><a class="header-anchor" href="#代码转换" aria-hidden="true">#</a> 代码转换</h3><p>在 Babel 中我们使用者最常使用的地方就是代码转换,大家常用的 Babel 插件就是定义代码转换规则而生的,而代码解析和生成这一头一尾都主要是 Babel 负责</p><h4 id="遍历抽象语法树"><a class="header-anchor" href="#遍历抽象语法树" aria-hidden="true">#</a> 遍历抽象语法树</h4><p>抽象语法树是一个树状数据结构,我们要生成新语法树,那么一定需要访问 AST 上的节点,因此我们需要一个工具来遍历抽象语法树的节点</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">traverser</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> visitor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果节点是数组，则遍历数组</span>\n  <span class="token keyword">function</span> <span class="token function">traverseArray</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">traverseNode</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">traverseNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> methods <span class="token operator">=</span> visitor<span class="token punctuation">[</span>node<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>methods <span class="token operator">&amp;&amp;</span> methods<span class="token punctuation">.</span>enter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      methods<span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;Program&#39;</span><span class="token operator">:</span>\n        <span class="token function">traverseArray</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>body<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token operator">:</span>\n        <span class="token function">traverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>init<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;Literal&#39;</span><span class="token operator">:</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token operator">:</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">traverseNode</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="转换代码"><a class="header-anchor" href="#转换代码" aria-hidden="true">#</a> 转换代码</h4><p>我们之前的遍历器traverser接收两个参数,一个是 ast 节点对象,一个是 visitor,visitor本质是挂载不同方法的 JavaScript 对象,visitor 也叫做访问者,顾名思义它会访问 ast 上每个节点,然后根据针对不同节点用相应的方法做出不同的转换</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">transformer</span><span class="token punctuation">(</span><span class="token parameter">ast</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> newAst <span class="token operator">=</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">,</span>\n    body<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 在老ast上加一个指针指向新ast</span>\n  ast<span class="token punctuation">.</span>_context <span class="token operator">=</span> newAst<span class="token punctuation">.</span>body<span class="token punctuation">;</span>\n  <span class="token function">traverser</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 处理变量声明</span>\n    VariableDeclaration<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function">enter</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> literalDeclaration <span class="token operator">=</span> <span class="token punctuation">{</span>\n          type<span class="token operator">:</span> node<span class="token punctuation">.</span>type<span class="token punctuation">,</span>\n          kind<span class="token operator">:</span> <span class="token string">&#39;var&#39;</span><span class="token punctuation">,</span>\n          identifierName<span class="token operator">:</span> node<span class="token punctuation">.</span>identifierName<span class="token punctuation">,</span>\n          init<span class="token operator">:</span> node<span class="token punctuation">.</span>init\n        <span class="token punctuation">}</span>\n        parent<span class="token punctuation">.</span>_context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>literalDeclaration<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> newAst<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>通过transformer函数我们就把AST转换成了新的AST</p><div class="language-json"><pre><code> <span class="token punctuation">{</span>\n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Program&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;kind&quot;</span><span class="token operator">:</span> <span class="token string">&quot;var&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;identifierName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;init&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Literal&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><h3 id="生成代码"><a class="header-anchor" href="#生成代码" aria-hidden="true">#</a> 生成代码</h3><p>生成代码这一步实际上是根据我们转换后的抽象语法树来生成新的代码,我们会实现一个函数, 他接受一个对象(ast),通过递归生成最终的代码</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">codeGenerator</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// 如果是&#39;Program&#39;节点，那么则会遍历它的body节点，并且递归的对这些节点再次调用codeGenerator，再把结果打印进入新的一行中</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;Program&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> node<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>codeGenerator<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 如果是变量, 则拼接对应单元并调用其init属性</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> node<span class="token punctuation">.</span>kind <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>identifierName <span class="token operator">+</span> <span class="token string">&#39; = &#39;</span> <span class="token operator">+</span> <span class="token function">codeGenerator</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">&#39;Literal&#39;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>至此我们完成了一个简陋的微型 babel</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">compiler</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> tokens <span class="token operator">=</span> <span class="token function">tokenizer</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> ast    <span class="token operator">=</span> <span class="token function">parser</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> newAst <span class="token operator">=</span> <span class="token function">transformer</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token function">codeGenerator</span><span class="token punctuation">(</span>newAst<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> output<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>调用compiler函数就可以得到一个转换后的结果</p><div class="language-javascript"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>\n</code></pre></div><h3 id="最后"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h3><p>我们可以通过这个微型 babel 了解 babel 的工作原理，有兴趣的可以阅读babel的源码</p>',58);t.render=function(a,p,t,e,c,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
