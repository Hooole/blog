import{o as n,c as s,d as a}from"./app.437d6b62.js";const t='{"title":"ESLint","description":"","frontmatter":{},"headers":[{"level":3,"title":"Lint工具","slug":"lint工具"},{"level":3,"title":"ESLint中几条核心思想","slug":"eslint中几条核心思想"},{"level":3,"title":"下面来简单配置一个ESLint规则","slug":"下面来简单配置一个eslint规则"},{"level":3,"title":"配置文件参数","slug":"配置文件参数"},{"level":3,"title":"ESLint是如何工作的","slug":"eslint是如何工作的"}],"relativePath":"interview/ESLint.md","lastUpdated":1648450937134}',e={},p=a('<h1 id="eslint"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> ESLint</h1><p>我们首先看下官网的介绍：可组装的JavaScript和JSX检查工具</p><p>其实对于JavaScript这种动态、弱类型的语言来说, 开发者在编写代码时更容易犯错，由于JavaScript不具备先天的编译流程，因此往往会在运行时暴露错误，而Linter(<a href="https://www.jslint.com/help.html" target="_blank" rel="noopener noreferrer">JSLint</a>、<a href="https://jshint.com/docs/" target="_blank" rel="noopener noreferrer">JSHint</a>、<a href="http://eslint.cn/" target="_blank" rel="noopener noreferrer">ESLint</a>)可以使开发者在执行前就发现代码错误或不合理的写法</p><h3 id="lint工具"><a class="header-anchor" href="#lint工具" aria-hidden="true">#</a> Lint工具</h3><ol><li>JSLint: 检测的鼻祖，直接检测源文件字符串。 配置较少，规范严格，扩展性差，无法根据错误定位到对应规则</li><li>JSHint: 基于JSHint开发。规则的参数可配置，提供完善的编辑器插件，支持一些常用库类和es6，但是不支持自定义规则，且无法根据错误定位到对应规则；</li><li>ESLint: 基于AST树检测规则。可扩展解析器，可扩展规则及配置；</li></ol><h3 id="eslint中几条核心思想"><a class="header-anchor" href="#eslint中几条核心思想" aria-hidden="true">#</a> ESLint中几条核心思想</h3><ul><li>所有规则都是插件化</li><li>所有的规则都是可配置的，可随时开关</li><li>所有的设计都是透明化的</li><li>使用<a href="https://github.com/eslint/espree" target="_blank" rel="noopener noreferrer">espree</a>进行JavaScript解析</li><li>使用AST分析语法</li></ul><h3 id="下面来简单配置一个eslint规则"><a class="header-anchor" href="#下面来简单配置一个eslint规则" aria-hidden="true">#</a> 下面来简单配置一个ESLint规则</h3><div class="language-javascript"><pre><code>  <span class="token comment">// 首先是初始化项目</span>\n  yarn init <span class="token operator">-</span>y\n  <span class="token comment">// 安装依赖</span>\n  yarn add eslint <span class="token operator">--</span>dev\n  <span class="token comment">// 初始化ESLint</span>\n  npx eslint <span class="token operator">--</span>init\n  <span class="token comment">// 使用eslint 处理文件</span>\n  eslint xxx<span class="token punctuation">.</span>js\n</code></pre></div><h3 id="配置文件参数"><a class="header-anchor" href="#配置文件参数" aria-hidden="true">#</a> 配置文件参数</h3><div class="language-javascript"><pre><code><span class="token punctuation">{</span>\n    <span class="token comment">// 若项目中有多个子项目，且每个项目都会有配置项，则子项目会一直向上查找直到遇到root为true的，然后合并配置项</span>\n    <span class="token string">&quot;root&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// 指定想启用的环境</span>\n    <span class="token string">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 浏览器全局变量</span>\n      browser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token comment">// Node.js 全局变量和作用域</span>\n      node<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token comment">// 启用除模块之外的所有ECMAScript 6功能</span>\n      es6<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 解释器，默认是espree</span>\n    <span class="token string">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n    <span class="token comment">// 解释器的配置</span>\n    <span class="token string">&quot;parserOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      sourceType<span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span>\n      parser<span class="token operator">:</span> <span class="token string">&#39;babel-eslint&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n     <span class="token comment">// 设置规则插件</span>\n    <span class="token string">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&quot;@typescript-eslint&quot;</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n   \n    <span class="token comment">// 指定的额外配置项</span>\n    <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;standard&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;prettier&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;plugin:vue/recommended&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./.eslintrc.kf.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token comment">// 定义扩展的通过插件添加的所有规则</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n     <span class="token comment">// 忽略的文件</span>\n    <span class="token string">&quot;ignorePatterns&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/**/*.test.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;src/frontend/generated/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="eslint是如何工作的"><a class="header-anchor" href="#eslint是如何工作的" aria-hidden="true">#</a> ESLint是如何工作的</h3><p>总的来说就是先使用parser(默认是espree)解析JavaScript生成AST, ESLint会遍历AST,然后在遍历到不同的节点或者特定的时机的时候，触发相应的处理函数，然后在函数中，可以抛出错误或警告，给出提示。</p>',13);e.render=function(a,t,e,o,l,r){return n(),s("div",null,[p])};export default e;export{t as __pageData};
