import{o as a,c as s,d as n}from"./app.437d6b62.js";const e='{"title":"内置Parameters类型","description":"","frontmatter":{},"headers":[{"level":3,"title":"内置Parameters类型","slug":"内置parameters类型"}],"relativePath":"typeChallenges/parameters.md","lastUpdated":1697010404725}',t={},p=n('<h3 id="内置parameters类型"><a class="header-anchor" href="#内置parameters类型" aria-hidden="true">#</a> 内置Parameters类型</h3><p>实现内置的 Parameters 类型</p><p>例如</p><p><code>const foo = (arg1: string, arg2: number): void =&gt; {}</code></p><p><code>type FunctionParamsType = MyParameters&lt;typeof foo&gt; //[arg1: string, arg2: number]</code></p><div class="language-javascript"><pre><code>type MyParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> any<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> infer <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> never\n</code></pre></div>',6);t.render=function(n,e,t,o,r,c){return a(),s("div",null,[p])};export default t;export{e as __pageData};
