import{o as s,c as a,d as e}from"./app.437d6b62.js";const n='{"title":"Awaited","description":"","frontmatter":{},"headers":[{"level":3,"title":"Awaited","slug":"awaited"}],"relativePath":"typeChallenges/awaited.md","lastUpdated":1696995351679}',t={},o=e('<h3 id="awaited"><a class="header-anchor" href="#awaited" aria-hidden="true">#</a> Awaited</h3><p>假如有一个Promise对象，这个Promise对象会返回一个类型。在TS中，我们用Promise中的T来描述这个Promise返回的类型，实现一个类型，获取这个类型</p><p>例如</p><ul><li><code>Promise&lt;ExampleType&gt;</code>, 返回 <code>ExampleType</code>类型</li><li><code>Promise&lt;Promise&lt;Promise&lt;string | boolean&gt;&gt;&gt;</code>, 返回 <code>string | boolean</code>类型</li></ul><div class="language-javascript"><pre><code>type MyAwaited<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Promise</span><span class="token operator">&lt;</span>infer <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">Promise</span><span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">?</span> MyAwaited<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">U</span> <span class="token operator">:</span> never\n</code></pre></div><ul><li><code>T extends Promise&lt;infer U&gt;</code> : 判断T是否是<code>Promise&lt;infer U&gt;</code> 的子类型。 如果满足，判断U是否是Promise对象，是则重新进行判断， 否则直接为U类型</li></ul>',6);t.render=function(e,n,t,p,r,l){return s(),a("div",null,[o])};export default t;export{n as __pageData};
