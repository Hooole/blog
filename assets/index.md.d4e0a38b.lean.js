import{o as n,c as s,a,b as t}from"./app.437d6b62.js";const o='{"title":"从原型到原型链","description":"","frontmatter":{},"headers":[{"level":2,"title":"从原型到原型链","slug":"从原型到原型链"},{"level":3,"title":"构造函数创建对象","slug":"构造函数创建对象"},{"level":3,"title":"prototype","slug":"prototype"},{"level":3,"title":"proto","slug":"proto"},{"level":3,"title":"contructor","slug":"contructor"},{"level":3,"title":"实例与原型","slug":"实例与原型"},{"level":3,"title":"原型链","slug":"原型链"}],"relativePath":"index.md","lastUpdated":1648450937133}',e={},c=a("h2",{id:"从原型到原型链"},[a("a",{class:"header-anchor",href:"#从原型到原型链","aria-hidden":"true"},"#"),t(" 从原型到原型链")],-1),p=a("h3",{id:"构造函数创建对象"},[a("a",{class:"header-anchor",href:"#构造函数创建对象","aria-hidden":"true"},"#"),t(" 构造函数创建对象")],-1),l=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[t("  "),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"Person"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),t("\n  "),a("span",{class:"token keyword"},"const"),t(" person "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Person"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t("\n  person"),a("span",{class:"token punctuation"},"."),t("name "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},"'Jack'"),t("\n")])])],-1),r=a("p",null,"在这个例子中，Person就是一个构造函数，通过new 创建了一个实例化对象person",-1),u=a("h3",{id:"prototype"},[a("a",{class:"header-anchor",href:"#prototype","aria-hidden":"true"},"#"),t(" prototype")],-1),i=a("p",null,[a("strong",null,"每个函数都有一个prototype属性")],-1),k=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[t("  "),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"Person"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),t("\n  "),a("span",{class:"token comment"},"// prototype是函数才会有的属性"),t("\n  "),a("span",{class:"token class-name"},"Person"),a("span",{class:"token punctuation"},"."),t("prototype"),a("span",{class:"token punctuation"},"."),t("name "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},"'Jack'"),t("\n  "),a("span",{class:"token keyword"},"const"),t(" person1 "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Person"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t("\n  "),a("span",{class:"token keyword"},"const"),t(" person2 "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Person"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t("\n  console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("person1"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// Jack"),t("\n  console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("person2"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// Jack"),t("\n")])])],-1),d=a("p",null,[t("函数的prototype都指向一个对象，这个对象正好是调用该构造函数的而创建的实例对象的原型 "),a("strong",null,"每个javascript对象（除null）之外在创建的时候就会与之关联另一个对象，这个对象就是我们说的原型，每一个对象都可以在原型上继承属性")],-1),h=a("h3",{id:"proto"},[a("a",{class:"header-anchor",href:"#proto","aria-hidden":"true"},"#"),t(),a("strong",null,"proto")],-1),m=a("p",null,"这是每一个JavaScript对象（除null）都会有的一个属性,这个属性指向该对象的原型",-1),g=a("h3",{id:"contructor"},[a("a",{class:"header-anchor",href:"#contructor","aria-hidden":"true"},"#"),t(" contructor")],-1),y=a("p",null,"每一个原型都有一个contrcutor指向关联的构造函数",-1),f=a("h3",{id:"实例与原型"},[a("a",{class:"header-anchor",href:"#实例与原型","aria-hidden":"true"},"#"),t(" 实例与原型")],-1),v=a("p",null,"当读取实例属性时，都会查找与对象关联的原型的属性，如果查不到，就找原型的原型，一直找到最顶层为止",-1),w=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[t("  "),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"Person"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),t("\n  "),a("span",{class:"token comment"},"// prototype是函数才会有的属性"),t("\n  "),a("span",{class:"token class-name"},"Person"),a("span",{class:"token punctuation"},"."),t("prototype"),a("span",{class:"token punctuation"},"."),t("name "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},"'Jack'"),t("\n  "),a("span",{class:"token keyword"},"const"),t(" person1 "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Person"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t("\n  person1"),a("span",{class:"token punctuation"},"."),t("name "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},"'David'"),t(" \n  console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("person1"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// David"),t("\n  "),a("span",{class:"token keyword"},"delete"),t(" person1"),a("span",{class:"token punctuation"},"."),t("name\n  console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("person1"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// Jack"),t("\n")])])],-1),P=a("h3",{id:"原型链"},[a("a",{class:"header-anchor",href:"#原型链","aria-hidden":"true"},"#"),t(" 原型链")],-1),J=a("p",null,[a("img",{src:"/blog/assets/prototype.1676a8ec.png",alt:"原型链"})],-1),j=a("p",null,[a("strong",null,"图中由相互关联的原型组成的链状结构就成为原型链（蓝色部分）")],-1);e.render=function(a,t,o,e,b,x){return n(),s("div",null,[c,p,l,r,u,i,k,d,h,m,g,y,f,v,w,P,J,j])};export default e;export{o as __pageData};
