import{o as s,c as n,d as a}from"./app.437d6b62.js";const t='{"title":"Includes","description":"","frontmatter":{},"headers":[{"level":3,"title":"Includes","slug":"includes"}],"relativePath":"typeChallenges/includes.md","lastUpdated":1696660024532}',p={},e=a('<h3 id="includes"><a class="header-anchor" href="#includes" aria-hidden="true">#</a> Includes</h3><p>实现一个<code>Includes</code>类型， 类似JavaScript中的Array.includes方法，接收两个参数，返回的类型要么是true,要么是false</p><p>例如</p><ul><li><code>type isPillarMen = Includes&lt;[&#39;Kars&#39;, &#39;Esidisi&#39;, &#39;Wamuu&#39;, &#39;Santana&#39;], &#39;Dio&#39;&gt;</code> // expected to be <code>false</code></li></ul><div class="language-javascript"><pre><code>\n<span class="token comment">// 简单版</span>\ntype Includes<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">readonly</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">[</span>number<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>\n\n<span class="token comment">// 完整版</span>\ntype Equal<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span> <span class="token operator">=</span>\n  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">X</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span>\n  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Y</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>\n\ntype Includes<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">readonly</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">=</span> \n  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>infer <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token operator">...</span> infer <span class="token constant">L</span><span class="token punctuation">]</span> \n    <span class="token operator">?</span> Equal<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name">true</span> \n      <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> Includes<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> \n        <span class="token operator">:</span> <span class="token boolean">false</span>\n</code></pre></div><ul><li><code>T[number]</code> : 返回数组中所有数字类型键对应的值，将这些值构造成一个联合类型 例如 <code>1 | 2 | 3</code></li><li><code>U extends T[number]</code> : 判断<code>U</code>是否是某个联合类型的子类型， 例如 <code>1 extends 1 | 2 | 3</code></li><li><code>Equal</code> : 用来判断两个值是否相等</li></ul>',6);p.render=function(a,t,p,o,c,l){return s(),n("div",null,[e])};export default p;export{t as __pageData};
